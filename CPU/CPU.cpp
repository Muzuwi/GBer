#include <vector>
#include <iostream>
#include "CPU.hpp"
#include "../Math/Math.hpp"
#include "../Memory/RAM.hpp"
#include "OPCodes.hpp"
#include "OPCodesCB.hpp"

namespace CPU{
	Reg Registers;
	bool halt = false;
	std::vector<char16_t> Stack;

	void start(){
		while(!halt){
			cycle();
		}

	}

	bool cycle(){
		unsigned char prefix = RAM::read(Registers.PC), 
					  opcode = RAM::read(Registers.PC + 0x001), 
					  imm1 = RAM::read(Registers.PC + 0x002), imm2 = RAM::read(Registers.PC + 0x003);
		if(prefix != 0xCB){
			// Use normal op table
			switch(prefix){
				case 0x00: OPCodes::gb00(); break;
				case 0x01: OPCodes::gb01(); break;
				case 0x02: OPCodes::gb02(); break;
				case 0x03: OPCodes::gb03(); break;
				case 0x04: OPCodes::gb04(); break;
				case 0x05: OPCodes::gb05(); break;
				case 0x06: OPCodes::gb06(); break;
				case 0x07: OPCodes::gb07(); break;
				case 0x08: OPCodes::gb08(); break;
				case 0x09: OPCodes::gb09(); break;
				case 0x0A: OPCodes::gb0A(); break;
				case 0x0B: OPCodes::gb0B(); break;
				case 0x0C: OPCodes::gb0C(); break;
				case 0x0D: OPCodes::gb0D(); break;
				case 0x0E: OPCodes::gb0E(); break;
				case 0x0F: OPCodes::gb0F(); break;
				case 0x10: OPCodes::gb10(); break;
				case 0x11: OPCodes::gb11(); break;
				case 0x12: OPCodes::gb12(); break;
				case 0x13: OPCodes::gb13(); break;
				case 0x14: OPCodes::gb14(); break;
				case 0x15: OPCodes::gb15(); break;
				case 0x16: OPCodes::gb16(); break;
				case 0x17: OPCodes::gb17(); break;
				case 0x18: OPCodes::gb18(); break;
				case 0x19: OPCodes::gb19(); break;
				case 0x1A: OPCodes::gb1A(); break;
				case 0x1B: OPCodes::gb1B(); break;
				case 0x1C: OPCodes::gb1C(); break;
				case 0x1D: OPCodes::gb1D(); break;
				case 0x1E: OPCodes::gb1E(); break;
				case 0x1F: OPCodes::gb1F(); break;
				case 0x20: OPCodes::gb20(); break;
				case 0x21: OPCodes::gb21(); break;
				case 0x22: OPCodes::gb22(); break;
				case 0x23: OPCodes::gb23(); break;
				case 0x24: OPCodes::gb24(); break;
				case 0x25: OPCodes::gb25(); break;
				case 0x26: OPCodes::gb26(); break;
				case 0x27: OPCodes::gb27(); break;
				case 0x28: OPCodes::gb28(); break;
				case 0x29: OPCodes::gb29(); break;
				case 0x2A: OPCodes::gb2A(); break;
				case 0x2B: OPCodes::gb2B(); break;
				case 0x2C: OPCodes::gb2C(); break;
				case 0x2D: OPCodes::gb2D(); break;
				case 0x2E: OPCodes::gb2E(); break;
				case 0x2F: OPCodes::gb2F(); break;
				case 0x30: OPCodes::gb30(); break;
				case 0x31: OPCodes::gb31(); break;
				case 0x32: OPCodes::gb32(); break;
				case 0x33: OPCodes::gb33(); break;
				case 0x34: OPCodes::gb34(); break;
				case 0x35: OPCodes::gb35(); break;
				case 0x36: OPCodes::gb36(); break;
				case 0x37: OPCodes::gb37(); break;
				case 0x38: OPCodes::gb38(); break;
				case 0x39: OPCodes::gb39(); break;
				case 0x3A: OPCodes::gb3A(); break;
				case 0x3B: OPCodes::gb3B(); break;
				case 0x3C: OPCodes::gb3C(); break;
				case 0x3D: OPCodes::gb3D(); break;
				case 0x3E: OPCodes::gb3E(); break;
				case 0x3F: OPCodes::gb3F(); break;
				case 0x40: OPCodes::gb40(); break;
				case 0x41: OPCodes::gb41(); break;
				case 0x42: OPCodes::gb42(); break;
				case 0x43: OPCodes::gb43(); break;
				case 0x44: OPCodes::gb44(); break;
				case 0x45: OPCodes::gb45(); break;
				case 0x46: OPCodes::gb46(); break;
				case 0x47: OPCodes::gb47(); break;
				case 0x48: OPCodes::gb48(); break;
				case 0x49: OPCodes::gb49(); break;
				case 0x4A: OPCodes::gb4A(); break;
				case 0x4B: OPCodes::gb4B(); break;
				case 0x4C: OPCodes::gb4C(); break;
				case 0x4D: OPCodes::gb4D(); break;
				case 0x4E: OPCodes::gb4E(); break;
				case 0x4F: OPCodes::gb4F(); break;
				case 0x50: OPCodes::gb50(); break;
				case 0x51: OPCodes::gb51(); break;
				case 0x52: OPCodes::gb52(); break;
				case 0x53: OPCodes::gb53(); break;
				case 0x54: OPCodes::gb54(); break;
				case 0x55: OPCodes::gb55(); break;
				case 0x56: OPCodes::gb56(); break;
				case 0x57: OPCodes::gb57(); break;
				case 0x58: OPCodes::gb58(); break;
				case 0x59: OPCodes::gb59(); break;
				case 0x5A: OPCodes::gb5A(); break;
				case 0x5B: OPCodes::gb5B(); break;
				case 0x5C: OPCodes::gb5C(); break;
				case 0x5D: OPCodes::gb5D(); break;
				case 0x5E: OPCodes::gb5E(); break;
				case 0x5F: OPCodes::gb5F(); break;
				case 0x60: OPCodes::gb60(); break;
				case 0x61: OPCodes::gb61(); break;
				case 0x62: OPCodes::gb62(); break;
				case 0x63: OPCodes::gb63(); break;
				case 0x64: OPCodes::gb64(); break;
				case 0x65: OPCodes::gb65(); break;
				case 0x66: OPCodes::gb66(); break;
				case 0x67: OPCodes::gb67(); break;
				case 0x68: OPCodes::gb68(); break;
				case 0x69: OPCodes::gb69(); break;
				case 0x6A: OPCodes::gb6A(); break;
				case 0x6B: OPCodes::gb6B(); break;
				case 0x6C: OPCodes::gb6C(); break;
				case 0x6D: OPCodes::gb6D(); break;
				case 0x6E: OPCodes::gb6E(); break;
				case 0x6F: OPCodes::gb6F(); break;
				case 0x70: OPCodes::gb70(); break;
				case 0x71: OPCodes::gb71(); break;
				case 0x72: OPCodes::gb72(); break;
				case 0x73: OPCodes::gb73(); break;
				case 0x74: OPCodes::gb74(); break;
				case 0x75: OPCodes::gb75(); break;
				case 0x76: OPCodes::gb76(); break;
				case 0x77: OPCodes::gb77(); break;
				case 0x78: OPCodes::gb78(); break;
				case 0x79: OPCodes::gb79(); break;
				case 0x7A: OPCodes::gb7A(); break;
				case 0x7B: OPCodes::gb7B(); break;
				case 0x7C: OPCodes::gb7C(); break;
				case 0x7D: OPCodes::gb7D(); break;
				case 0x7E: OPCodes::gb7E(); break;
				case 0x7F: OPCodes::gb7F(); break;
				case 0x80: OPCodes::gb80(); break;
				case 0x81: OPCodes::gb81(); break;
				case 0x82: OPCodes::gb82(); break;
				case 0x83: OPCodes::gb83(); break;
				case 0x84: OPCodes::gb84(); break;
				case 0x85: OPCodes::gb85(); break;
				case 0x86: OPCodes::gb86(); break;
				case 0x87: OPCodes::gb87(); break;
				case 0x88: OPCodes::gb88(); break;
				case 0x89: OPCodes::gb89(); break;
				case 0x8A: OPCodes::gb8A(); break;
				case 0x8B: OPCodes::gb8B(); break;
				case 0x8C: OPCodes::gb8C(); break;
				case 0x8D: OPCodes::gb8D(); break;
				case 0x8E: OPCodes::gb8E(); break;
				case 0x8F: OPCodes::gb8F(); break;
				case 0x90: OPCodes::gb90(); break;
				case 0x91: OPCodes::gb91(); break;
				case 0x92: OPCodes::gb92(); break;
				case 0x93: OPCodes::gb93(); break;
				case 0x94: OPCodes::gb94(); break;
				case 0x95: OPCodes::gb95(); break;
				case 0x96: OPCodes::gb96(); break;
				case 0x97: OPCodes::gb97(); break;
				case 0x98: OPCodes::gb98(); break;
				case 0x99: OPCodes::gb99(); break;
				case 0x9A: OPCodes::gb9A(); break;
				case 0x9B: OPCodes::gb9B(); break;
				case 0x9C: OPCodes::gb9C(); break;
				case 0x9D: OPCodes::gb9D(); break;
				case 0x9E: OPCodes::gb9E(); break;
				case 0x9F: OPCodes::gb9F(); break;
				case 0xA0: OPCodes::gbA0(); break;
				case 0xA1: OPCodes::gbA1(); break;
				case 0xA2: OPCodes::gbA2(); break;
				case 0xA3: OPCodes::gbA3(); break;
				case 0xA4: OPCodes::gbA4(); break;
				case 0xA5: OPCodes::gbA5(); break;
				case 0xA6: OPCodes::gbA6(); break;
				case 0xA7: OPCodes::gbA7(); break;
				case 0xA8: OPCodes::gbA8(); break;
				case 0xA9: OPCodes::gbA9(); break;
				case 0xAA: OPCodes::gbAA(); break;
				case 0xAB: OPCodes::gbAB(); break;
				case 0xAC: OPCodes::gbAC(); break;
				case 0xAD: OPCodes::gbAD(); break;
				case 0xAE: OPCodes::gbAE(); break;
				case 0xAF: OPCodes::gbAF(); break;
				case 0xB0: OPCodes::gbB0(); break;
				case 0xB1: OPCodes::gbB1(); break;
				case 0xB2: OPCodes::gbB2(); break;
				case 0xB3: OPCodes::gbB3(); break;
				case 0xB4: OPCodes::gbB4(); break;
				case 0xB5: OPCodes::gbB5(); break;
				case 0xB6: OPCodes::gbB6(); break;
				case 0xB7: OPCodes::gbB7(); break;
				case 0xB8: OPCodes::gbB8(); break;
				case 0xB9: OPCodes::gbB9(); break;
				case 0xBA: OPCodes::gbBA(); break;
				case 0xBB: OPCodes::gbBB(); break;
				case 0xBC: OPCodes::gbBC(); break;
				case 0xBD: OPCodes::gbBD(); break;
				case 0xBE: OPCodes::gbBE(); break;
				case 0xBF: OPCodes::gbBF(); break;
				case 0xC0: OPCodes::gbC0(); break;
				case 0xC1: OPCodes::gbC1(); break;
				case 0xC2: OPCodes::gbC2(); break;
				case 0xC3: OPCodes::gbC3(); break;
				case 0xC4: OPCodes::gbC4(); break;
				case 0xC5: OPCodes::gbC5(); break;
				case 0xC6: OPCodes::gbC6(); break;
				case 0xC7: OPCodes::gbC7(); break;
				case 0xC8: OPCodes::gbC8(); break;
				case 0xC9: OPCodes::gbC9(); break;
				case 0xCA: OPCodes::gbCA(); break;
				case 0xCC: OPCodes::gbCC(); break;
				case 0xCD: OPCodes::gbCD(); break;
				case 0xCE: OPCodes::gbCE(); break;
				case 0xCF: OPCodes::gbCF(); break;
				case 0xD0: OPCodes::gbD0(); break;
				case 0xD1: OPCodes::gbD1(); break;
				case 0xD2: OPCodes::gbD2(); break;
				case 0xD3: OPCodes::gbD3(); break;
				case 0xD4: OPCodes::gbD4(); break;
				case 0xD5: OPCodes::gbD5(); break;
				case 0xD6: OPCodes::gbD6(); break;
				case 0xD7: OPCodes::gbD7(); break;
				case 0xD8: OPCodes::gbD8(); break;
				case 0xD9: OPCodes::gbD9(); break;
				case 0xDA: OPCodes::gbDA(); break;
				case 0xDB: OPCodes::gbDB(); break;
				case 0xDC: OPCodes::gbDC(); break;
				case 0xDD: OPCodes::gbDD(); break;
				case 0xDE: OPCodes::gbDE(); break;
				case 0xDF: OPCodes::gbDF(); break;
				case 0xE0: OPCodes::gbE0(); break;
				case 0xE1: OPCodes::gbE1(); break;
				case 0xE2: OPCodes::gbE2(); break;
				case 0xE3: OPCodes::gbE3(); break;
				case 0xE4: OPCodes::gbE4(); break;
				case 0xE5: OPCodes::gbE5(); break;
				case 0xE6: OPCodes::gbE6(); break;
				case 0xE7: OPCodes::gbE7(); break;
				case 0xE8: OPCodes::gbE8(); break;
				case 0xE9: OPCodes::gbE9(); break;
				case 0xEA: OPCodes::gbEA(); break;
				case 0xEB: OPCodes::gbEB(); break;
				case 0xEC: OPCodes::gbEC(); break;
				case 0xED: OPCodes::gbED(); break;
				case 0xEE: OPCodes::gbEE(); break;
				case 0xEF: OPCodes::gbEF(); break;
				case 0xF0: OPCodes::gbF0(); break;
				case 0xF1: OPCodes::gbF1(); break;
				case 0xF2: OPCodes::gbF2(); break;
				case 0xF3: OPCodes::gbF3(); break;
				case 0xF4: OPCodes::gbF4(); break;
				case 0xF5: OPCodes::gbF5(); break;
				case 0xF6: OPCodes::gbF6(); break;
				case 0xF7: OPCodes::gbF7(); break;
				case 0xF8: OPCodes::gbF8(); break;
				case 0xF9: OPCodes::gbF9(); break;
				case 0xFA: OPCodes::gbFA(); break;
				case 0xFB: OPCodes::gbFB(); break;
				case 0xFC: OPCodes::gbFC(); break;
				case 0xFD: OPCodes::gbFD(); break;
				case 0xFE: OPCodes::gbFE(); break;
				case 0xFF: OPCodes::gbFF(); break;
				default: std::cout << "!!!Unknown opcode!!! " << Math::decHex(prefix) << "\n";
			}
		}else{
			// Use cb op table
			switch(opcode){
				case 0x00: OPCodesCB::cb00(); break;
				case 0x01: OPCodesCB::cb01(); break;
				case 0x02: OPCodesCB::cb02(); break;
				case 0x03: OPCodesCB::cb03(); break;
				case 0x04: OPCodesCB::cb04(); break;
				case 0x05: OPCodesCB::cb05(); break;
				case 0x06: OPCodesCB::cb06(); break;
				case 0x07: OPCodesCB::cb07(); break;
				case 0x08: OPCodesCB::cb08(); break;
				case 0x09: OPCodesCB::cb09(); break;
				case 0x0A: OPCodesCB::cb0A(); break;
				case 0x0B: OPCodesCB::cb0B(); break;
				case 0x0C: OPCodesCB::cb0C(); break;
				case 0x0D: OPCodesCB::cb0D(); break;
				case 0x0E: OPCodesCB::cb0E(); break;
				case 0x0F: OPCodesCB::cb0F(); break;
				case 0x10: OPCodesCB::cb10(); break;
				case 0x11: OPCodesCB::cb11(); break;
				case 0x12: OPCodesCB::cb12(); break;
				case 0x13: OPCodesCB::cb13(); break;
				case 0x14: OPCodesCB::cb14(); break;
				case 0x15: OPCodesCB::cb15(); break;
				case 0x16: OPCodesCB::cb16(); break;
				case 0x17: OPCodesCB::cb17(); break;
				case 0x18: OPCodesCB::cb18(); break;
				case 0x19: OPCodesCB::cb19(); break;
				case 0x1A: OPCodesCB::cb1A(); break;
				case 0x1B: OPCodesCB::cb1B(); break;
				case 0x1C: OPCodesCB::cb1C(); break;
				case 0x1D: OPCodesCB::cb1D(); break;
				case 0x1E: OPCodesCB::cb1E(); break;
				case 0x1F: OPCodesCB::cb1F(); break;
				case 0x20: OPCodesCB::cb20(); break;
				case 0x21: OPCodesCB::cb21(); break;
				case 0x22: OPCodesCB::cb22(); break;
				case 0x23: OPCodesCB::cb23(); break;
				case 0x24: OPCodesCB::cb24(); break;
				case 0x25: OPCodesCB::cb25(); break;
				case 0x26: OPCodesCB::cb26(); break;
				case 0x27: OPCodesCB::cb27(); break;
				case 0x28: OPCodesCB::cb28(); break;
				case 0x29: OPCodesCB::cb29(); break;
				case 0x2A: OPCodesCB::cb2A(); break;
				case 0x2B: OPCodesCB::cb2B(); break;
				case 0x2C: OPCodesCB::cb2C(); break;
				case 0x2D: OPCodesCB::cb2D(); break;
				case 0x2E: OPCodesCB::cb2E(); break;
				case 0x2F: OPCodesCB::cb2F(); break;
				case 0x30: OPCodesCB::cb30(); break;
				case 0x31: OPCodesCB::cb31(); break;
				case 0x32: OPCodesCB::cb32(); break;
				case 0x33: OPCodesCB::cb33(); break;
				case 0x34: OPCodesCB::cb34(); break;
				case 0x35: OPCodesCB::cb35(); break;
				case 0x36: OPCodesCB::cb36(); break;
				case 0x37: OPCodesCB::cb37(); break;
				case 0x38: OPCodesCB::cb38(); break;
				case 0x39: OPCodesCB::cb39(); break;
				case 0x3A: OPCodesCB::cb3A(); break;
				case 0x3B: OPCodesCB::cb3B(); break;
				case 0x3C: OPCodesCB::cb3C(); break;
				case 0x3D: OPCodesCB::cb3D(); break;
				case 0x3E: OPCodesCB::cb3E(); break;
				case 0x3F: OPCodesCB::cb3F(); break;
				case 0x40: OPCodesCB::cb40(); break;
				case 0x41: OPCodesCB::cb41(); break;
				case 0x42: OPCodesCB::cb42(); break;
				case 0x43: OPCodesCB::cb43(); break;
				case 0x44: OPCodesCB::cb44(); break;
				case 0x45: OPCodesCB::cb45(); break;
				case 0x46: OPCodesCB::cb46(); break;
				case 0x47: OPCodesCB::cb47(); break;
				case 0x48: OPCodesCB::cb48(); break;
				case 0x49: OPCodesCB::cb49(); break;
				case 0x4A: OPCodesCB::cb4A(); break;
				case 0x4B: OPCodesCB::cb4B(); break;
				case 0x4C: OPCodesCB::cb4C(); break;
				case 0x4D: OPCodesCB::cb4D(); break;
				case 0x4E: OPCodesCB::cb4E(); break;
				case 0x4F: OPCodesCB::cb4F(); break;
				case 0x50: OPCodesCB::cb50(); break;
				case 0x51: OPCodesCB::cb51(); break;
				case 0x52: OPCodesCB::cb52(); break;
				case 0x53: OPCodesCB::cb53(); break;
				case 0x54: OPCodesCB::cb54(); break;
				case 0x55: OPCodesCB::cb55(); break;
				case 0x56: OPCodesCB::cb56(); break;
				case 0x57: OPCodesCB::cb57(); break;
				case 0x58: OPCodesCB::cb58(); break;
				case 0x59: OPCodesCB::cb59(); break;
				case 0x5A: OPCodesCB::cb5A(); break;
				case 0x5B: OPCodesCB::cb5B(); break;
				case 0x5C: OPCodesCB::cb5C(); break;
				case 0x5D: OPCodesCB::cb5D(); break;
				case 0x5E: OPCodesCB::cb5E(); break;
				case 0x5F: OPCodesCB::cb5F(); break;
				case 0x60: OPCodesCB::cb60(); break;
				case 0x61: OPCodesCB::cb61(); break;
				case 0x62: OPCodesCB::cb62(); break;
				case 0x63: OPCodesCB::cb63(); break;
				case 0x64: OPCodesCB::cb64(); break;
				case 0x65: OPCodesCB::cb65(); break;
				case 0x66: OPCodesCB::cb66(); break;
				case 0x67: OPCodesCB::cb67(); break;
				case 0x68: OPCodesCB::cb68(); break;
				case 0x69: OPCodesCB::cb69(); break;
				case 0x6A: OPCodesCB::cb6A(); break;
				case 0x6B: OPCodesCB::cb6B(); break;
				case 0x6C: OPCodesCB::cb6C(); break;
				case 0x6D: OPCodesCB::cb6D(); break;
				case 0x6E: OPCodesCB::cb6E(); break;
				case 0x6F: OPCodesCB::cb6F(); break;
				case 0x70: OPCodesCB::cb70(); break;
				case 0x71: OPCodesCB::cb71(); break;
				case 0x72: OPCodesCB::cb72(); break;
				case 0x73: OPCodesCB::cb73(); break;
				case 0x74: OPCodesCB::cb74(); break;
				case 0x75: OPCodesCB::cb75(); break;
				case 0x76: OPCodesCB::cb76(); break;
				case 0x77: OPCodesCB::cb77(); break;
				case 0x78: OPCodesCB::cb78(); break;
				case 0x79: OPCodesCB::cb79(); break;
				case 0x7A: OPCodesCB::cb7A(); break;
				case 0x7B: OPCodesCB::cb7B(); break;
				case 0x7C: OPCodesCB::cb7C(); break;
				case 0x7D: OPCodesCB::cb7D(); break;
				case 0x7E: OPCodesCB::cb7E(); break;
				case 0x7F: OPCodesCB::cb7F(); break;
				case 0x80: OPCodesCB::cb80(); break;
				case 0x81: OPCodesCB::cb81(); break;
				case 0x82: OPCodesCB::cb82(); break;
				case 0x83: OPCodesCB::cb83(); break;
				case 0x84: OPCodesCB::cb84(); break;
				case 0x85: OPCodesCB::cb85(); break;
				case 0x86: OPCodesCB::cb86(); break;
				case 0x87: OPCodesCB::cb87(); break;
				case 0x88: OPCodesCB::cb88(); break;
				case 0x89: OPCodesCB::cb89(); break;
				case 0x8A: OPCodesCB::cb8A(); break;
				case 0x8B: OPCodesCB::cb8B(); break;
				case 0x8C: OPCodesCB::cb8C(); break;
				case 0x8D: OPCodesCB::cb8D(); break;
				case 0x8E: OPCodesCB::cb8E(); break;
				case 0x8F: OPCodesCB::cb8F(); break;
				case 0x90: OPCodesCB::cb90(); break;
				case 0x91: OPCodesCB::cb91(); break;
				case 0x92: OPCodesCB::cb92(); break;
				case 0x93: OPCodesCB::cb93(); break;
				case 0x94: OPCodesCB::cb94(); break;
				case 0x95: OPCodesCB::cb95(); break;
				case 0x96: OPCodesCB::cb96(); break;
				case 0x97: OPCodesCB::cb97(); break;
				case 0x98: OPCodesCB::cb98(); break;
				case 0x99: OPCodesCB::cb99(); break;
				case 0x9A: OPCodesCB::cb9A(); break;
				case 0x9B: OPCodesCB::cb9B(); break;
				case 0x9C: OPCodesCB::cb9C(); break;
				case 0x9D: OPCodesCB::cb9D(); break;
				case 0x9E: OPCodesCB::cb9E(); break;
				case 0x9F: OPCodesCB::cb9F(); break;
				case 0xA0: OPCodesCB::cbA0(); break;
				case 0xA1: OPCodesCB::cbA1(); break;
				case 0xA2: OPCodesCB::cbA2(); break;
				case 0xA3: OPCodesCB::cbA3(); break;
				case 0xA4: OPCodesCB::cbA4(); break;
				case 0xA5: OPCodesCB::cbA5(); break;
				case 0xA6: OPCodesCB::cbA6(); break;
				case 0xA7: OPCodesCB::cbA7(); break;
				case 0xA8: OPCodesCB::cbA8(); break;
				case 0xA9: OPCodesCB::cbA9(); break;
				case 0xAA: OPCodesCB::cbAA(); break;
				case 0xAB: OPCodesCB::cbAB(); break;
				case 0xAC: OPCodesCB::cbAC(); break;
				case 0xAD: OPCodesCB::cbAD(); break;
				case 0xAE: OPCodesCB::cbAE(); break;
				case 0xAF: OPCodesCB::cbAF(); break;
				case 0xB0: OPCodesCB::cbB0(); break;
				case 0xB1: OPCodesCB::cbB1(); break;
				case 0xB2: OPCodesCB::cbB2(); break;
				case 0xB3: OPCodesCB::cbB3(); break;
				case 0xB4: OPCodesCB::cbB4(); break;
				case 0xB5: OPCodesCB::cbB5(); break;
				case 0xB6: OPCodesCB::cbB6(); break;
				case 0xB7: OPCodesCB::cbB7(); break;
				case 0xB8: OPCodesCB::cbB8(); break;
				case 0xB9: OPCodesCB::cbB9(); break;
				case 0xBA: OPCodesCB::cbBA(); break;
				case 0xBB: OPCodesCB::cbBB(); break;
				case 0xBC: OPCodesCB::cbBC(); break;
				case 0xBD: OPCodesCB::cbBD(); break;
				case 0xBE: OPCodesCB::cbBE(); break;
				case 0xBF: OPCodesCB::cbBF(); break;
				case 0xC0: OPCodesCB::cbC0(); break;
				case 0xC1: OPCodesCB::cbC1(); break;
				case 0xC2: OPCodesCB::cbC2(); break;
				case 0xC3: OPCodesCB::cbC3(); break;
				case 0xC4: OPCodesCB::cbC4(); break;
				case 0xC5: OPCodesCB::cbC5(); break;
				case 0xC6: OPCodesCB::cbC6(); break;
				case 0xC7: OPCodesCB::cbC7(); break;
				case 0xC8: OPCodesCB::cbC8(); break;
				case 0xC9: OPCodesCB::cbC9(); break;
				case 0xCA: OPCodesCB::cbCA(); break;
				case 0xCB: OPCodesCB::cbCB(); break;
				case 0xCC: OPCodesCB::cbCC(); break;
				case 0xCD: OPCodesCB::cbCD(); break;
				case 0xCE: OPCodesCB::cbCE(); break;
				case 0xCF: OPCodesCB::cbCF(); break;
				case 0xD0: OPCodesCB::cbD0(); break;
				case 0xD1: OPCodesCB::cbD1(); break;
				case 0xD2: OPCodesCB::cbD2(); break;
				case 0xD3: OPCodesCB::cbD3(); break;
				case 0xD4: OPCodesCB::cbD4(); break;
				case 0xD5: OPCodesCB::cbD5(); break;
				case 0xD6: OPCodesCB::cbD6(); break;
				case 0xD7: OPCodesCB::cbD7(); break;
				case 0xD8: OPCodesCB::cbD8(); break;
				case 0xD9: OPCodesCB::cbD9(); break;
				case 0xDA: OPCodesCB::cbDA(); break;
				case 0xDB: OPCodesCB::cbDB(); break;
				case 0xDC: OPCodesCB::cbDC(); break;
				case 0xDD: OPCodesCB::cbDD(); break;
				case 0xDE: OPCodesCB::cbDE(); break;
				case 0xDF: OPCodesCB::cbDF(); break;
				case 0xE0: OPCodesCB::cbE0(); break;
				case 0xE1: OPCodesCB::cbE1(); break;
				case 0xE2: OPCodesCB::cbE2(); break;
				case 0xE3: OPCodesCB::cbE3(); break;
				case 0xE4: OPCodesCB::cbE4(); break;
				case 0xE5: OPCodesCB::cbE5(); break;
				case 0xE6: OPCodesCB::cbE6(); break;
				case 0xE7: OPCodesCB::cbE7(); break;
				case 0xE8: OPCodesCB::cbE8(); break;
				case 0xE9: OPCodesCB::cbE9(); break;
				case 0xEA: OPCodesCB::cbEA(); break;
				case 0xEB: OPCodesCB::cbEB(); break;
				case 0xEC: OPCodesCB::cbEC(); break;
				case 0xED: OPCodesCB::cbED(); break;
				case 0xEE: OPCodesCB::cbEE(); break;
				case 0xEF: OPCodesCB::cbEF(); break;
				case 0xF0: OPCodesCB::cbF0(); break;
				case 0xF1: OPCodesCB::cbF1(); break;
				case 0xF2: OPCodesCB::cbF2(); break;
				case 0xF3: OPCodesCB::cbF3(); break;
				case 0xF4: OPCodesCB::cbF4(); break;
				case 0xF5: OPCodesCB::cbF5(); break;
				case 0xF6: OPCodesCB::cbF6(); break;
				case 0xF7: OPCodesCB::cbF7(); break;
				case 0xF8: OPCodesCB::cbF8(); break;
				case 0xF9: OPCodesCB::cbF9(); break;
				case 0xFA: OPCodesCB::cbFA(); break;
				case 0xFB: OPCodesCB::cbFB(); break;
				case 0xFC: OPCodesCB::cbFC(); break;
				case 0xFD: OPCodesCB::cbFD(); break;
				case 0xFE: OPCodesCB::cbFE(); break;
				case 0xFF: OPCodesCB::cbFF(); break;
				default: std::cout << "!!!Unknown opcode!!! " << Math::decHex(prefix) << "\n";
			}
		}


		return true;
	}
}